import React, { Fragment } from 'react';
import { Row, Col } from 'react-bootstrap';
import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';
import { Formik } from 'formik';
import { setLoggedState } from '../../AppSlice.js';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import cryptoJS from 'crypto-js'
import { showLoginFailedMessage } from './slice.js';

function Login() {
  const navigate = useNavigate();
  const dispatch = useDispatch();  
  const {
    loginFailedMessage,
  } = useSelector((state) => {
    console.log(`Login::render: state=${JSON.stringify(state.login)}`);
    return state.app;
  });

  const onSubmit = async (values, { resetForm, setStatus }) => {
    let res
    setStatus(undefined);
    var passwdHashed = cryptoJS.SHA1(values.password).toString(cryptoJS.enc.Hex);
    try {
      res = await axios({
        url: 'http://127.0.0.1:50001/api/auth',
        method: 'post',
        data: { login: values.login, password: passwdHashed }
      })

    } catch(err) {
      console.log(`Login failed:. ${err}`)
      res = err.response
    }

    console.log(`Request result: ${JSON.stringify(res)}`);
    if (res.status !== 201 && res.status !== 200) {
      console.log(`Login failed, status = ${res.status}`);
      setStatus('Bad login on password.');
      return;
    }

    window.localStorage.setItem('authInfo', JSON.stringify(res.data));
    dispatch(setLoggedState({ isLoggedIn: true }));
    resetForm();

    navigate('/');
  }

  const onCloseModal = {
    dispatch(showLoginFailedMessage( { message:'' } ));
  }

  return (
    <Fragment>
      <Row>
        <Col xs={2} sm={2} md={3} lg={3} xl={4} xxl={5}></Col>
        <Col xs={8} sm={8} md={6} lg={6} xl={4} xxl={2}>
          <Formik
            initialValues={{ login: '', password: '' }}
            onSubmit={onSubmit}>
              {({
                values,
                errors,
                status,
                touched,
                handleChange,
                handleBlur,
                handleSubmit,
                isSubmitting,
              }) => (
                <Form className='p-5'>
                  <fieldset disabled={isSubmitting}>
                    <Form.Group className='mb-3' controlId='formBasicLogin'>
                      <Form.Label>Login</Form.Label>
                      <Form.Control 
                        name="login" 
                        type="login" 
                        placeholder='Enter login' 
                        onChange={handleChange}
                        onBlur={handleBlur}
                        value={values.login} />
                      <Form.Text className='text-muted'>Enter user's name</Form.Text>
                    </Form.Group>
                    <Form.Group className='mb-3' controlId='formBasicPassword'>
                      <Form.Label>Password</Form.Label>
                      <Form.Control 
                        name="password" 
                        type="password" 
                        placeholder='Enter password' 
                        onChange={handleChange}
                        onBlur={handleBlur}
                        value={values.password}/>
                      <Form.Text className='text-muted'>Enter user's password</Form.Text>
                      { status ? <div style={{color: 'red'}}>{status}</div> : <div style={{color: 'red'}}>{errors.password}</div> }
                    </Form.Group>
                    <Button
                      className='d-flex justify-content-center' 
                      variant="primary" 
                      type="submit"
                      disabled={isSubmitting} 
                      onClick={handleSubmit}>
                        <div className='d-flex align-items-center'>
                          <div className='p-1'>OK</div>
                            { isSubmitting &&
                              <span className="spinner-border spinner-border-md" role="status" aria-hidden="true"></span> }                
                        </div>
                    </Button>
                    </fieldset>
                </Form>
              )}
          </Formik>
        </Col>
        <Col xl={4} xxl={5}></Col>
      </Row>
    </Fragment>
  );
}

export default Login;